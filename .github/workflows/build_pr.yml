name: Create PR Release

on: 
  pull_request:
    branches:
      - dev

jobs:
  package-pr:
    runs-on: ubuntu-20.04
    container:
      image: jugeeya/cargo-skyline:3.2.0-no-dkp
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3.1.0
      - name: Get Branch Name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Download ROMFS
        id: pr-romfs
        continue-on-error: true
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'WuBoytH/WuBor-Romfs'
          version: 'tags/${{ steps.branch-name.outputs.current_branch }}'
          file: 'romfs.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download ROMFS (Backup)
        if: steps.pr-romfs.outcome == 'failure'
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'WuBoytH/WuBor-Romfs'
          version: 'tags/dev'
          file: 'romfs.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Release NRO (PR)
        run: |
          cargo skyline build --release --features pr
        env:
          HOME: /root
      - name: Setup Build Directory (PR)
        shell: bash
        run: |
          cd scripts && python3 create_pr.py && cd ..
      - name: Upload Plugin Artifact (PR)
        uses: actions/upload-artifact@v3.1.0
        with:
          name: The_WuBor_Patch_PR
          path: build/
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Comment PR Artifact Link
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const {owner, repo} = context.repo;
            const run_id = ${{github.events.push.commits.id}};
            const issue_number = ${{github.event.number}};
            const data = await github.rest.actions.listWorkflowRunArtifacts({owner, repo, run_id});
            if (!data.artifacts) {
              return core.error('No artifacts found');
            }
            let body = 'Download the artifacts for this pull request:\n';
            for (const art of data.artifacts) {
              if (art.name == 'The_WuBor_Patch_PR') {
                body += '\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)';
              }
            }
            const {data: comments} = await github.rest.issues.listComments({repo, owner, issue_number});
            const existing_comment = comments.find((c) => c.user.login === 'github-actions[bot]');
            if (existing_comment) {
              core.info('Deleting comment ${existing_comment.id}');
              await github.rest.issues.deleteComment({repo, owner, comment_id: existing_comment.id});
            }
            core.info('Creating a comment');
            await github.rest.issues.createComment({repo, owner, issue_number, body})