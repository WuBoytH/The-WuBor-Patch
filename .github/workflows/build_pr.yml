name: Create PR Build

on: 
  pull_request:
    branches:
      - dev

jobs:
  package-pr:
    runs-on: ubuntu-latest
    container:
      image: jugeeya/cargo-skyline:3.0.0-dkp-beta
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: actions/checkout@v2.4.2
      - name: Get Branch Name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Download ROMFS
        id: pr-romfs
        continue-on-error: true
        # You may pin to the exact commit or the version.
        # uses: i3h/download-release-asset@6a9870c8f1c561f9e67550d6177c31c2b1c49fef
        uses: i3h/download-release-asset@v1.3.2
        with:
          # 
          owner: WuBoytH
          # 
          repo: WuBor-Romfs
          # 
          tag: ${{ steps.branch-name.outputs.current_branch }}
          # 
          file: romfs.zip
      - name: Download ROMFS (Backup)
        if: steps.pr-romfs.outcome == 'failure'
        # You may pin to the exact commit or the version.
        # uses: i3h/download-release-asset@6a9870c8f1c561f9e67550d6177c31c2b1c49fef
        uses: i3h/download-release-asset@v1.3.2
        with:
          # 
          owner: WuBoytH
          # 
          repo: WuBor-Romfs
          # 
          tag: dev
          # 
          file: romfs.zip
      # - name: Build Release NRO (PR)
      #   run: |
      #     PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin /root/.cargo/bin/cargo-skyline skyline build --release --features pr
      #   env:
      #     HOME: /root
      - name: Create Release ZIP (PR)
        shell: bash
        run: |
          cd scripts && python3 create_pr.py && cd ..
      - name: Upload Plugin Artifact (PR)
        uses: actions/upload-artifact@v3.1.0
        with:
          name: The_WuBor_Patch_PR
          path: The_WuBor_Patch_PR.zip
  pr_comment:
    runs-on: ubuntu-latest
    needs: package-pr
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            const {owner, repo} = context.repo;
            const run_id = ${{github.event.workflow_run.id}};
            const pull_head_sha = '${{github.event.workflow_run.head_sha}}';
            const issue_number = await (async () => {
              const pulls = await github.pulls.list({owner, repo});
              for await (const {data} of github.paginate.iterator(pulls)) {
                for (const pull of data) {
                  if (pull.head.sha === pull_head_sha) {
                    return pull.number;
                  }
                }
              }
            })();
            if (issue_number) {
              core.info(`Using pull request ${issue_number}`);
            } else {
              return core.error(`No matching pull request found`);
            }
            const {data: {artifacts}} = await github.actions.listWorkflowRunArtifacts({owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the artifacts for this pull request:\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }
            const {data: comments} = await github.issues.listComments({repo, owner, issue_number});
            const existing_comment = comments.find((c) => c.user.login === 'github-actions[bot]');
            if (existing_comment) {
              core.info(`Updating comment ${existing_comment.id}`);
              await github.issues.updateComment({repo, owner, comment_id: existing_comment.id, body});
            } else {
              core.info(`Creating a comment`);
              await github.issues.createComment({repo, owner, issue_number, body});
            }